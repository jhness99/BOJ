/*
* 1.아이디어
* dp[n]=dp[n-1]+dp[n-2]
* 2.시간복잡도
* O(N), N<= 1000 따라서 가능
* 3.변수형
* int:
*/
/*
* 문제풀이
* n개의 가로를 가진 직사각형은 각각 n-1 직사각형의 패턴과 n-2직사각형의 패턴을 더한 것과 같다.
* n-2에서 2개 n-1에서 1개 나오지만 n-2의 패턴중 1개는 n-1의 패턴과 겹치므로 각각 1개씩이다.
*/
//#include <iostream>
//
//using namespace std;
//
//int dp[1001];
//
//int main(void) {
//
//	dp[1] = 1;
//	dp[2] = 2;
//	for (int i = 3; i <= 1000; i++)
//		dp[i] = (dp[i - 1] + dp[i - 2]) % 10007;
//
//	int N;
//	cin >> N;
//	cout << dp[N];
//	return 0;
//}
//2023-02-23 복습
/*
* 1.아이디어
* 간단한 타일문제이다
* 타일이 N일 때 N-1부분이 차 있고 1칸을 채워야 하는 상황에서 1가지의 경우가 있다.
* 타일이 N일 때 N-2부분이 차 있고 2칸을 채워야 하는 상황에서 2가지의 경우가 있다.
* 하지만 2칸을 채워야 하는 경우, 1가지의 경우와 중복되는 경우가 1가지 경우 있기 때문에 1가지라고 할 수 있다.
*
* 따라서 점화식은 dp[i] = dp[i-1] + dp[i-2]
* 2.시간복잡도
* O(N), N <= 1000, 따라서가능
* 3.변수형
* int : 10007로 나눈 나머지를 출력하므로 int
*/
#include <iostream>

using namespace std;

int dp[1001];

int main(void) {

	int N;
	cin >> N;

	dp[1] = 1;
	dp[2] = 2;

	for (int i = 3; i <= N; i++) {
		dp[i] = (dp[i - 1] + dp[i - 2]) % 10007;
	}

	cout << dp[N];

	return 0;
}