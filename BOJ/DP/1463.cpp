/*
* 1.아이디어
* dp[1000001]를 만들고 dp[1] = 1, dp[2] = 1, dp[3] = 1를 해준다.(이때 dp는 연산의 횟수다)
* 4부터 시작해서 3으로 나누어 떨어지는지, 2로 나누어 떨어지는지 확인한다.
* 가능한경우 원래 값과 비교해서 더 작은 값으로 선택
* 안될경우 -1 연산을 선택해서 기존값과 더 작은값을 선택.
* 2.시간복잡도
* O(N)이고 N <= 1000000 이다. 제한시간이 0.15초 이므로 15000000회의 연산을 할 수 있으므로 가능
* 3.변수형
* int
*/
/*
* 문제풀이
* 문제를 잘 못 읽어서 dp[1] = 0을 1로 해버렸다
* 문제에서 1을 만드는 조건이라 했으므로 이미 1이면 연산횟수가 없는것이 맞다.
*/
#include <iostream>

using namespace std;
 
int dp[1000001];

int main(void) {

	int N;
	cin >> N;

	dp[1] = 0;		//dp[1] = 1이라고 해서 틀림
	dp[2] = 1;
	dp[3] = 1;

	for (int i = 4; i <= N; i++) {
		if (i % 3 == 0) 
			dp[i] = dp[i / 3] + 1;
		if (i % 2 == 0) 
			dp[i] = dp[i] ? min(dp[i], dp[i / 2] + 1) : dp[i / 2] + 1;
		dp[i] = dp[i] ? min(dp[i], dp[i-1] + 1) : dp[i-1] + 1;
	}
	cout << dp[N];

	return 0;
}